
import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { Tables } from '@/integrations/supabase/types';

type Teacher = Tables<'teachers'>;
type TeacherInsert = {
  name: string;
  email: string;
  mobile: string;
  department_id: string;
  qualification: string;
  experience: string;
  subjects: string[];
  password?: string;
};

export const useTeachers = () => {
  const [teachers, setTeachers] = useState<Teacher[]>([]);
  const [loading, setLoading] = useState(true);

  const fetchTeachers = async () => {
    try {
      const { data, error } = await supabase
        .from('teachers')
        .select(`
          *,
          departments (name)
        `)
        .order('name');
      
      if (error) throw error;
      setTeachers(data || []);
    } catch (error) {
      console.error('Error fetching teachers:', error);
    } finally {
      setLoading(false);
    }
  };

  const generateDefaultPassword = () => {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let password = '';
    for (let i = 0; i < 10; i++) {
      password += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return password;
  };

  const addTeacher = async (teacherData: TeacherInsert) => {
    try {
      const defaultPassword = teacherData.password || generateDefaultPassword();
      const { data: hashedPassword } = await supabase.rpc('hash_password', { password: defaultPassword });
      
      const { data, error } = await supabase
        .from('teachers')
        .insert({
          name: teacherData.name,
          email: teacherData.email,
          mobile: teacherData.mobile,
          department_id: teacherData.department_id,
          qualification: teacherData.qualification,
          experience: teacherData.experience,
          subjects: teacherData.subjects,
          password_hash: hashedPassword,
          employee_id: '' // Will be auto-generated by trigger
        })
        .select(`
          *,
          departments (name)
        `)
        .single();

      if (error) throw error;
      
      await fetchTeachers();
      return { data: { ...data, generatedPassword: defaultPassword }, error: null };
    } catch (error) {
      console.error('Error adding teacher:', error);
      return { data: null, error };
    }
  };

  const updateTeacher = async (id: string, teacherData: Partial<TeacherInsert>) => {
    try {
      const updateData: any = { ...teacherData };
      
      // Remove password from updateData since we don't want to send it to the database
      delete updateData.password;
      
      if (teacherData.password) {
        const { data: hashedPassword } = await supabase.rpc('hash_password', { password: teacherData.password });
        updateData.password_hash = hashedPassword;
      }

      const { error } = await supabase
        .from('teachers')
        .update(updateData)
        .eq('id', id);

      if (error) throw error;
      
      await fetchTeachers();
      return { error: null };
    } catch (error) {
      console.error('Error updating teacher:', error);
      return { error };
    }
  };

  const deleteTeacher = async (id: string) => {
    try {
      const { error } = await supabase
        .from('teachers')
        .delete()
        .eq('id', id);

      if (error) throw error;
      
      await fetchTeachers();
      return { error: null };
    } catch (error) {
      console.error('Error deleting teacher:', error);
      return { error };
    }
  };

  useEffect(() => {
    fetchTeachers();
  }, []);

  return {
    teachers,
    loading,
    addTeacher,
    updateTeacher,
    deleteTeacher,
    refetch: fetchTeachers
  };
};
