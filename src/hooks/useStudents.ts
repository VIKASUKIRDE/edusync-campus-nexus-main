
import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { Tables } from '@/integrations/supabase/types';

type Student = Tables<'students'>;
type StudentInsert = {
  name: string;
  email: string;
  mobile: string;
  department_id: string;
  semester: string;
  section: string;
  password?: string;
};

export const useStudents = () => {
  const [students, setStudents] = useState<Student[]>([]);
  const [loading, setLoading] = useState(true);

  const fetchStudents = async () => {
    try {
      const { data, error } = await supabase
        .from('students')
        .select(`
          *,
          departments (name)
        `)
        .order('name');
      
      if (error) throw error;
      setStudents(data || []);
    } catch (error) {
      console.error('Error fetching students:', error);
    } finally {
      setLoading(false);
    }
  };

  const generateDefaultPassword = () => {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let password = '';
    for (let i = 0; i < 8; i++) {
      password += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return password;
  };

  const addStudent = async (studentData: StudentInsert) => {
    try {
      const defaultPassword = studentData.password || generateDefaultPassword();
      const { data: hashedPassword } = await supabase.rpc('hash_password', { password: defaultPassword });
      
      const { data, error } = await supabase
        .from('students')
        .insert({
          name: studentData.name,
          email: studentData.email,
          mobile: studentData.mobile,
          department_id: studentData.department_id,
          semester: studentData.semester,
          section: studentData.section,
          password_hash: hashedPassword,
          login_id: '' // Will be auto-generated by trigger
        })
        .select(`
          *,
          departments (name)
        `)
        .single();

      if (error) throw error;
      
      await fetchStudents();
      return { data: { ...data, generatedPassword: defaultPassword }, error: null };
    } catch (error) {
      console.error('Error adding student:', error);
      return { data: null, error };
    }
  };

  const updateStudent = async (id: string, studentData: Partial<StudentInsert>) => {
    try {
      const updateData: any = { ...studentData };
      
      // Remove password from updateData since we don't want to send it to the database
      delete updateData.password;
      
      if (studentData.password) {
        const { data: hashedPassword } = await supabase.rpc('hash_password', { password: studentData.password });
        updateData.password_hash = hashedPassword;
      }

      const { error } = await supabase
        .from('students')
        .update(updateData)
        .eq('id', id);

      if (error) throw error;
      
      await fetchStudents();
      return { error: null };
    } catch (error) {
      console.error('Error updating student:', error);
      return { error };
    }
  };

  const deleteStudent = async (id: string) => {
    try {
      const { error } = await supabase
        .from('students')
        .delete()
        .eq('id', id);

      if (error) throw error;
      
      await fetchStudents();
      return { error: null };
    } catch (error) {
      console.error('Error deleting student:', error);
      return { error };
    }
  };

  useEffect(() => {
    fetchStudents();
  }, []);

  return {
    students,
    loading,
    addStudent,
    updateStudent,
    deleteStudent,
    refetch: fetchStudents
  };
};
